/*
 * We formalize a switch-based network for broadcast communication
 */

theory Broadcast
begin

builtins: asymmetric-encryption, symmetric-encryption, hashing, signing, multiset

// Define Message Authentication Code (MAC)
functions: mac/2, ver/3, true/0
equations: ver(k, m, mac(k, m)) = true

// Define the shared symmetric key
functions: shk/0

section{* PKI *}

/*
  Generates a long-term key for a party
 */
rule Register_pk:
    [ Fr(~ltkA) ] // Fr(x) generates a fresh (random) value
                  // `~ltkA` stands for a long-term key or a private key
  --[ GenLtk($A, ~ltkA)
    , OnlyOnce(<'Register_pk', $A>) ]->
    [ !Ltk($A, ~ltkA) // Binds the long-term key to the party `$A`
    , !Pk($A, pk(~ltkA)) // Models the distribution of the public key
    , Out(pk(~ltkA)) // Outputs the public key so others and attackers have knowledge
    ]

/*
  The adversarial capability to reveal long-term keys of parties
 */
rule Reveal_ltk:
    [ !Ltk(A, ltk) ]
  --[ RevealLtk(A) ]->
    [ Out(ltk) ]

section{* Initialization *}

rule Register_host:
    [ !Pk($A, pubkey) ]
  --[ OnlyOnce(<'Register_host', $A>)
    , RegisterHost($A)
    , AuthExists($Auth)
    , NotEq($Auth, $A) ]->
    [ !AuthenticatorHostMapping($Auth, $A)
    , !NegotiateGroupKey($A, shk) ]

rule Register_authenticator:
    [ !Pk($Auth, pubkey) ]
  --[ OnlyOnce(<'Register_authenticator'>)
    , RegisterAuthenticator($Auth) ]->
    [ !Authenticator($Auth) ]

section{* Protocol *}

rule Authenticator_init_0:
  let
      msg = <Auth, A, ~linkKey>
      enc_msg = aenc(msg, pkA)
      sig = sign(enc_msg, ltkAuth)
      pkt = <enc_msg, sig>
  in
    [ Fr(~linkKey)
    , !Ltk(Auth, ltkAuth)
    , !Pk(A, pkA)
    , !Authenticator(Auth)
    , !AuthenticatorHostMapping(Auth, A) ]
  --[ LinkKeyCreate(A, Auth, ~linkKey)
    , OnlyOnce(<'LinkKeyCreate', Auth, A>) ]->
    [ St_Authenticator_init_0(A, Auth, ~linkKey)
    , Out(pkt) ]

rule Host_init_0:
  let
      msg = <Auth, A, linkKey>
      enc_msg = aenc(msg, pk(ltkA))
      pkt = <enc_msg, sig>
  in
    [ !Ltk(A, ltkA)
    , In(pkt)
    , !Pk(Auth, pkAuth)
    , !AuthenticatorHostMapping(Auth, A) ]
  --[ Create(A, 'Host')
    , AnswerLinkKeyNegotiation(A, linkKey)
    , LinkKeyAccepted(A, Auth, linkKey)
    , Eq(verify(sig, msg, pkAuth), true) ]->
    [ St_Host_init_0(A, Auth, linkKey) ]

rule Host_send:
  let
      src = A
      ciphertext = senc(~data, shk)
      msg = <src, ciphertext>
      magtag = mac(linkKey, msg)
      pkt = <msg, magtag>
  in
    [ Fr(~data)
    , St_Host_init_0(A, Auth, linkKey)
    , !NegotiateGroupKey(A, shk) ]
  --[ Send(A, msg)
    , Honest(A) ]->
    [ St_Host_send(A, Auth)
    , Out(pkt) ]

rule Authenticator_forward:
  let
      msg = <A, ciphertext>
      pktA = <msg, mactagA>
      pktB = msg
  in
    [ In(pktA)
    , St_Authenticator_init_0(A, Auth, linkKeyA)
    , St_Authenticator_init_0(B, Auth, linkKeyB) ]
  --[ Forward(Auth, pktA)
    , Eq(ver(linkKeyA, msg, mactagA), true)
    , Neq(A, B) ]->
    [ St_Authenticator_forward_0(A, Auth, B, pktB)
    , Out(pktB) ]

rule Authenticator_proof:
  let
      pktHash = h(pkt)
      mactag = mac(linkKeyB, pktHash)
      proofPkt = <pktHash, mactag>
  in
    [ St_Authenticator_forward_0(A, Auth, B, pkt)
    , St_Authenticator_init_0(B, Auth, linkKeyB) ]
  --[ Proof(Auth, B, pkt)
    , Neq(A, B)
    , DoS_Protection(pkt) ]->
    [ Out(proofPkt) ]

rule Host_recv:
  let
      src = A
      ciphertext = senc(data, shk)
      msg = <src, ciphertext>
      pkt = msg
  in
    [ In(pkt)
    , St_Host_init_0(B, Auth, linkKey) ]
  --[ Recv(B, pkt)
    , Neq(A, B) ]->
    [ St_Host_recv_0(A, Auth, B, pkt, linkKey) ]

rule Host_process:
  let
      src = A
      ciphertext = senc(data, shk)
      msg = <src, ciphertext>
      pkt = msg
      pktHash = h(pkt)
      proofPkt = <pktHash, mactag>
  in
    [ St_Host_recv_0(A, Auth, B, pkt, linkKey)
    , In(proofPkt) ]
  --[ Process(B, pkt)
    , Eq(ver(linkKey, pktHash, mactag), true) ]->
    []

section{* Restrictions *}

restriction Equality:
    "All x y #i. Eq(x, y) @ #i ==> x = y"

restriction Inequality:
    "All x #i. Neq(x, x) @ #i ==> F"

restriction ExistingAuth:
    "All A #i. AuthExists(A) @ #i ==>
        (Ex #j. RegisterAuthenticator(A) @ #j & #j < #i)"

restriction OnlyOnce:
    "All #i #j x. OnlyOnce(x) @ #i & OnlyOnce(x) @ #j ==> #i = #j"

section{* Properties *}

// Executability
lemma Executable:
    exists-trace
    " Ex A B data #i #j #m #n.
        RegisterHost(A) @ #i
      & RegisterHost(B) @ #j
      & Send(A, data) @ #m
      & Process(B, data) @ #n
      & m < n
      & i < m
      & j < n
      & not (A = B)
    "

lemma RecvProcessExecutable:
    exists-trace
    " Ex A msg #i #j #k.
        RegisterHost(A) @ #i
      & Recv(A, msg) @ #j
      & Process(A, msg) @ #k
      & j < k
      & i < j
    "

// Correctness
lemma Correctness:
    " All A B Auth linkKeyA linkKeyB msg #i #j #m #n #q.
        RegisterHost(A) @ #i
      & RegisterHost(B) @ #j
      & LinkKeyCreate(A, Auth, linkKeyA) @ #m
      & LinkKeyCreate(B, Auth, linkKeyB) @ #n
      & Process(B, msg) @ #q
        ==> (
              (Ex #p.
                 Send(A, msg) @ #p
               & i < m
               & j < n
               & p < q
               & n < p
              )
            | (Ex #x. RevealLtk(A) @ #x )
            | (Ex #y. RevealLtk(B) @ #y )
            | (Ex #z. RevealLtk(Auth) @ #z )
            )
    "

lemma RecvThenProcess:
    " All A msg #i #k.
        RegisterHost(A) @ #i
      & Process(A, msg) @ #k
        ==> (Ex #j.
               Recv(A, msg) @ #j
             & j < k
             & i < j
            )
    "

lemma ProofThenProcess:
    " All A Auth msg linkKey #i #n #k.
        RegisterHost(A) @ #i
      & Process(A, msg) @ #n
      & LinkKeyCreate(A, Auth, linkKey) @ #k
        ==> (
              (Ex #j #m.
                 RegisterAuthenticator(Auth) @ #j
               & Proof(Auth, A, msg) @ #m
               & i < n
               & i < k
               & j < k
               & k < m
               & m < n
              )
            | (Ex #l. RevealLtk(A) @ #l )
            | (Ex #p. RevealLtk(Auth) @ #p )
            )
    "

// No replay
// TODO: add a counter
lemma NoReplay:
    " All A msg #i #j.
        Process(A, msg) @ #i
      & Process(A, msg) @ #j
        ==> #i = #j
    "

// Link key secrecy
lemma LinkKeySecrecy:
    " not (
        Ex A Auth linkKey #i #j.
          LinkKeyAccepted(A, Auth, linkKey) @ #i
        & K(linkKey) @ #j
        & not (
          (Ex #m. RevealLtk(A) @ #m)
        | (Ex #n. RevealLtk(Auth) @ #n)
        )
      )
    "

// Source authentication
lemma SourceAuthentication:
    " All A B C Auth msg linkKeyA linkKeyB linkKeyC #i #j #k #l #m #n.
        Send(A, msg) @ #i
      & Send(B, msg) @ #j
      & Process(C, msg) @ #k
      & LinkKeyAccepted(A, Auth, linkKeyA) @ #l
      & LinkKeyAccepted(B, Auth, linkKeyB) @ #m
      & LinkKeyAccepted(C, Auth, linkKeyC) @ #n
      ==> (
             ((A = B) & (#i = #j) & (#l = #m) & (#i < #k))
           | (Ex #x. RevealLtk(A) @ #x )
           | (Ex #y. RevealLtk(B) @ #y )
           | (Ex #z. RevealLtk(C) @ #z )
           | (Ex #p. RevealLtk(Auth) @ #p )
          )
    "

lemma SourceAuthentication2:
    " All C Auth msg linkKeyC #k #n.
        Process(C, msg) @ #k
      & LinkKeyAccepted(C, Auth, linkKeyC) @ #n
      ==> (
             (Ex A B linkKeyA linkKeyB #i #j #l #m.
                Send(A, msg) @ #i
              & Send(B, msg) @ #j
              & LinkKeyAccepted(A, Auth, linkKeyA) @ #l
              & LinkKeyAccepted(B, Auth, linkKeyB) @ #m
              & (A = B) & (#i = #j) & (#l = #m) & (#i < #k)
             )
           | (Ex A #x. RevealLtk(A) @ #x )
           | (Ex #y. RevealLtk(C) @ #y )
           | (Ex #z. RevealLtk(Auth) @ #z )
          )
    "

lemma DoSProtection:
  " All m #i.
      DoS_Protection(m) @ #i
    ==> (
           (Ex A #j.
              Send(A, m) @ #j
            & Honest(A) @ #j
            & #j < #i)
         | (Ex A #r.
              RevealLtk(A) @ #r
            & Honest(A) @ #i
            & #r < #i)
        )"

end
