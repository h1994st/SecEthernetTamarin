/*
    Protocol:    Broadcast Protection Protocol
    Modeler:     Shengtuo Hu
    Date:        January 2021

    Status:      working

    We present a solution to ensure the source authentication in an in-vehicle
    Ethernet network. Our approach introduces an on-path authenticator in order
    to minimize the overall time overhead.

*/

theory BroadcastProtection
begin

builtins: asymmetric-encryption, symmetric-encryption, hashing

// Define Message Authentication Code (MAC)
functions: mac/2, ver/3, true/0
equations: ver(k, m, mac(k, m)) = true

// Define the shared symmetric key
functions: shk/0 [private]

// Public Key Infrastructure
section{* PKI *}

/*
  Generates a long-term key for a party
 */
rule Register_pk:
    [ Fr(~ltkA) ] // Fr(x) generates a fresh (random) value
                  // `~ltkA` stands for a long-term key or a private key
  --[ GenLtk($A, ~ltkA) ]->
    [ !Ltk($A, ~ltkA) // Binds the long-term key to the party `$A`
    , !Pk($A, pk(~ltkA)) // Models the distribution of the public key
    ]

/*
  Gets the public key from the PKI
 */
rule Get_pk:
    [ !Pk(A, pubkey) ]
  --[ GetPk(A, pubkey) ]->
    [ Out(pubkey) ] // Outputs the public key so others and attackers have knowledge

section{* Attacker *}

/*
  The adversarial capability to reveal long-term keys of parties
 */
rule Reveal_ltk:
    [ !Ltk(A, ltk) ]
  --[ RevealLtk(A) ]->
    [ Out(ltk) ]

/*
  The adversarial capability to reveal the shared key
 */
rule Reveal_shk:
    []
  --[ RevealShk() ]->
    [ Out(shk) ]

section{* Broadcast Communication *}

rule SendPDU:
    [ Fr(~data) ]
  --[ Send($A, ~data) ]->
    [ Out(<$A, ~data, mac(shk, ~data)>) ]

rule ReceivePDU:
    [ In(<$B, data, mactag>) ]
  --[ Neq($A, $B)
    , Eq(ver(shk, data, mactag), true)
    , Receive($A, data)
    ]->
    []

// Restrictions
restriction Equality:
    "All x y #i. Eq(x, y) @ #i ==> x = y"

restriction Inequality:
    "All x #i. Neq(x, x) @ #i ==> F"

section{* Security Properties *}

end
